int main() {
  char capturePath[256];
  double ax, ay, az;
  double bx[2], by[2], bz[2];
  double dx[%(chip_point_count)i], dy[%(chip_point_count)i], dz[%(chip_point_count)i];
  double ux, uy;
  double vx, vy;
  int chipIndex, chipPointOffset;
  int cols, rows;
  int i, j;


  cols = %(chip_cols)i;
  rows = %(chip_rows)i;

%(bounds_code)s

%(points_code)s

  SelectOptConf("%(optconf)s");
  Stg_SetNosepieceObjective("%(objective)s");
  Camera_ExposureSet(%(exposure)f);

  for (chipIndex = 0; chipIndex < %(chip_count)i; chipIndex = chipIndex + 1) {
    sprintf(&capturePath, "%(output_path)s", "chipIndex");

    ND_DefineExperiment(FALSE, TRUE, FALSE, FALSE, FALSE, &capturePath, "prefix", 0, FALSE, FALSE, FALSE);
    ND_ResetMultipointExp();

    chipPointOffset = chipIndex * 4;

    ux = (dx[chipPointOffset + 1] - dx[chipPointOffset]) / (cols - 1);
    uy = (dy[chipPointOffset + 1] - dy[chipPointOffset]) / (cols - 1); // ~0

    vx = (dx[chipPointOffset + 3] - dx[chipPointOffset]) / (rows - 1); // ~0
    vy = (dy[chipPointOffset + 3] - dy[chipPointOffset]) / (rows - 1);

    for (j = 0; j < rows; j = j + 1) {
      for (i = 0; i < cols; i = i + 1) {
        ax = dx[chipPointOffset] + i * ux + j * vx;
        ay = dy[chipPointOffset] + i * uy + j * vy;
        az = bilinear(&dx, &dy, &dz, ax, ay);

        if (!(%(check_bounds)i && ((ax < bx[0]) || (ax > bx[1]) || (ay < by[0]) || (ay > by[1]) || (az < bz[0]) || (az > bz[1])))) {
          ND_AppendMultipointPoint(ax, ay, az, "");
        }
      }
    }

    ND_RunExperimentNoProgressBar(FALSE);
  }
}


double bilinear(double* x[4], double* y[4], double* s[4], double px, double py) {
  double a, u, v;

  a = x[0] * (y[1] - y[3]) + x[1] * (y[3] - y[0]) + x[3] * (y[0] - y[1]);
  u = ((x[1] - x[0]) * py - (y[1] - y[0]) * px + x[0] * y[1] - y[0] * x[1]) / a;
  v  = ((x[0] - x[3]) * py - (y[0] - y[3]) * px - x[0] * y[3] + y[0] * x[3]) / a;

  return (1 - v) * ((1 - u) * s[0] + u * s[3]) + v * ((1 - u) * s[1] + u * s[2]);
}
