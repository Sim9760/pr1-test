int main() {
  char capturePath[256];
  double ax, ay, az;
  double bx[2], by[2], bz[2];
  double dx[%(chip_point_count)i], dy[%(chip_point_count)i], dz[%(chip_point_count)i];
  double ux, uy;
  double vx, vy;
  int chipIndex, chipPointOffset;
  int cols, rows;
  int i, j;


  cols = %(chip_cols)i;
  rows = %(chip_rows)i;

%(bounds_code)s

%(points_code)s

  SelectOptConf("%(optconf)s");
  Stg_SetNosepieceObjective("%(objective)s");
  Camera_ExposureSet(%(exposure)f);

  for (chipIndex = 0; chipIndex < %(chip_count)i; chipIndex = chipIndex + 1) {
    sprintf(&capturePath, "%(output_path)s", "chipIndex");

    ND_DefineExperiment(FALSE, TRUE, FALSE, FALSE, FALSE, &capturePath, "prefix", 0, FALSE, FALSE, FALSE);
    ND_ResetMultipointExp();

    chipPointOffset = chipIndex * 4;

    ux = (dx[chipPointOffset + 1] - dx[chipPointOffset]) / (cols - 1);
    uy = (dy[chipPointOffset + 1] - dy[chipPointOffset]) / (cols - 1); // ~0

    vx = (dx[chipPointOffset + 2] - dx[chipPointOffset]) / (rows - 1); // ~0
    vy = (dy[chipPointOffset + 2] - dy[chipPointOffset]) / (rows - 1);

    for (j = 0; j < rows; j = j + 1) {
      for (i = 0; i < cols; i = i + 1) {
        ax = dx[chipPointOffset] + i * ux + j * vx;
        ay = dy[chipPointOffset] + i * uy + j * vy;
        az = bilinear(&dx, &dy, &dz, ax, ay);

        if (!(%(check_bounds)i && ((ax < bx[0]) || (ax > bx[1]) || (ay < by[0]) || (ay > by[1]) || (az < bz[0]) || (az > bz[1])))) {
          ND_AppendMultipointPoint(ax, ay, az, "");
        }
      }
    }

    ND_RunExperimentNoProgressBar(FALSE);
  }
}


double bilinear(double* x[4], double* y[4], double* s[4], double px, double py) {
  double a, b, c, d, e, f, g, h, ka1, ka2, kb1, kb2, kc;
  double alpha, beta;
  double tol = 0.0001;

  a = -x[0] + x[2];
  b = -x[0] + x[1];
  c = ((x[0] - x[1]) - x[2]) + x[3];
  d = px - x[0];
  e = -y[0] + y[2];
  f = -y[0] + y[1];
  g = ((y[0] - y[1]) - y[2]) + y[3];
  h = py - y[0];

  ka1 = c*e - a*g;
  ka2 = c*f - b*g;
  kb1 = ((b*e - a*f) + d*g) - c*h;
  kb2 = ((b*e - a*f) - d*g) + c*h;
  kc = d*f - b*h;

  alpha = -(kb1 + sqrt(-4.*ka1*kc + kb1*kb1)) / (2.*ka1);
  beta  = (kb2 + sqrt(-4.*ka1*kc + kb1*kb1)) / (2.*ka2);

  if ((alpha < -tol) || (alpha > (1. + tol)) || (beta < -tol) || (beta > (1. + tol))) {
    alpha = (-kb1 + sqrt(-4.*ka1*kc + kb1*kb1)) / (2.*ka1);
    beta = (kb2 - sqrt(-4.*ka1*kc + kb1*kb1)) / (2.*ka2);
  }

  return (1 - alpha) * ((1 - beta) * s[0] + beta * s[1]) + alpha * ((1 - beta) * s[2] + beta * s[3]);
}
